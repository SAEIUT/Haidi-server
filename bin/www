#!/usr/bin/env node

/**
 * Module dependencies.
 */


var app = require('../app');
var debug = require('debug')('src:server');
var http = require('http')
const { initProducer, startConsumer } = require('../kafka');
const { createServer } = require('vite');  // Import de Vite
const path = require('path'); // Ajoute cette ligne en haut du fichier

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


initProducer()
  .then((producer) => {
    console.log('Kafka producer initialized');
  })
  .catch((err) => {
    console.error('Failed to initialize Kafka producer', err);
   // Exit the application if producer initialization fails
  });


  async function startVite() {
    const vite = await createServer({
      root: path.resolve(__dirname, '../web'),  // Définit la bonne racine
      server: {
        middlewareMode: true,  // Active le mode middleware pour Express
      },
    });
  
    // Middleware pour forcer la redirection vers index.html
    app.use(async (req, res, next) => {
      if (req.originalUrl === '/' || req.originalUrl.startsWith('/index.html')) {
        const html = await vite.transformIndexHtml(
          req.originalUrl, 
          await vite.ssrLoadModule(path.resolve(__dirname, '../web/index.html'))
        );
        res.status(200).set({ 'Content-Type': 'text/html' }).end(html);
        return;
      }
      next();
    });
  
    // Utiliser les middlewares de Vite pour servir l'app front-end
    app.use(vite.middlewares);
  }

startVite().then(() => {
  // Lancer le serveur Express après avoir démarré Vite
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}