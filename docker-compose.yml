services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports: 
      - '5432:5432'
    volumes:
      - app-db:/var/lib/postgresql/data

  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo-data:/data/db

  mongo-express:
    image: mongo-express
    ports:
      - 8082:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_URL: ${ME_CONFIG_MONGODB_URL}
      ME_CONFIG_BASICAUTH: "false"
  app:
    image: lamarquenoe/api-sae:latest
    build:
      context: ./
    environment:
      DB_SCHEMA: postgres
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: postgres
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_URL: ${ME_CONFIG_MONGODB_URL}
    depends_on:
      - postgres
      - mongo
      - broker
    ports:
      - '80:80'

  # # Base de données sncf
  db-sncf:
    image: mysql:latest
    container_name: db-sncf
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: sncf
      MYSQL_USER: user1
      MYSQL_PASSWORD: password1
    ports:
      - "3307:3306"
    volumes:
      - sncf_data:/var/lib/mysql

  # # API 1
  api-sncf:
    build: ./api-sncf
    container_name: api-sncf
    environment:
      DATABASE_HOST: db-sncf
      DATABASE_PORT: 3306
      DATABASE_USER: user1
      DATABASE_PASSWORD: password1
      DATABASE_NAME: sncf
    depends_on:
      - db-sncf
    ports:
      - "8001:3000"

  # Base de données 2
  db-af:
    image: mysql:latest
    container_name: db-af
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: af
      MYSQL_USER: user2
      MYSQL_PASSWORD: password2
    ports:
      - "3308:3306"
    volumes:
      - af_data:/var/lib/mysql

  # API 2
  api-af:
    build: ./api-af
    container_name: api-af
    environment:
      DATABASE_HOST: db-af
      DATABASE_PORT: 3306
      DATABASE_USER: user2
      DATABASE_PASSWORD: password2
      DATABASE_NAME: af
    depends_on:
      - db-af
    ports:
      - "8003:3000"

  # # Base de données 3
  db-ratp:
    image: mysql:latest
    container_name: db-ratp
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: ratp
      MYSQL_USER: user3
      MYSQL_PASSWORD: password3
    ports:
      - "3309:3306"
    volumes:
      - ratp_data:/var/lib/mysql

#  API 3
  api-ratp:
    build: ./api-ratp
    container_name: api-ratp
    environment:
      DATABASE_HOST: db-ratp
      DATABASE_PORT: 3306
      DATABASE_USER: user3
      DATABASE_PASSWORD: password3
      DATABASE_NAME: ratp
    depends_on:
      - db-ratp
    ports:
      - "8004:3000"

  # # Base de données 4
  db-taxi:
    image: mysql:latest
    container_name: db-taxi
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: taxi
      MYSQL_USER: user4
      MYSQL_PASSWORD: password4
    ports:
      - "3310:3306"
    volumes:
      - taxi_data:/var/lib/mysql

#  API 4
  api-taxi:
    build: ./api-taxi
    container_name: api-taxi
    environment:
      DATABASE_HOST: db-taxi
      DATABASE_PORT: 3306
      DATABASE_USER: user4
      DATABASE_PASSWORD: password4
      DATABASE_NAME: taxi
    depends_on:
      - db-taxi
    ports:
      - "8005:3000"
# SERVEUR KAFKA
  broker:
    image: apache/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_CONTROLLER_SESSION_TIMEOUT_MS: 30000
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      CLUSTER_ID: "xhwpnR7oT9yoUaZ1-6o2JA"



volumes:
  app-db:
  mongo-data:
  af_data:
  sncf_data:
  ratp_data:
  taxi_data: